apiVersion: v1
kind: ConfigMap
metadata:
  name: pub-config
data:
  nginx.conf: |
    user root;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        access_log  /var/log/nginx/access.log  main;
        sendfile        on;
        keepalive_timeout  65;
        types {
            text/plain                            log;
            text/plain                            cfg;
            text/plain                            conf;
            text/plain                            inc;
            text/plain                            ini;
            text/plain                            spec;
            text/plain                            patch;
            text/plain                            yml;
            text/plain                            yaml;
            text/plain                            sh;
        }
        server {
            listen       80;
            server_name  localhost;
            location / {
                root   /var/www;
                index  index.html index.htm;
                autoindex on;
            }
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   /usr/share/nginx/html;
            }
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pub
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: pub
spec:
  replicas: {{ .Values.pub.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: pub
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pub
    spec:
      {{- with .Values.pub.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: pub
          image: {{ .Values.docker_io_registry.url -}}/{{- .Values.pub.image }}
          imagePullPolicy: IfNotPresent
          tty: true
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: pub
              mountPath: /var/www/pub
              readOnly: true
          livenessProbe:
            httpGet:
              path: /
              port: 80
          readinessProbe:
            httpGet:
              path: /
              port: 80
      volumes:
        - name: nginx-config
          configMap:
            name: pub-config
        - name: pub
          persistentVolumeClaim:
            claimName: {{ .Release.Namespace -}}-pub-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: pub
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: pub
spec:
  selector:
    app.kubernetes.io/name: pub
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: pub
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: pub
  annotations:
    kubernetes.io/ingress.class: {{ .Values.ingress.ingress_class }}
    nginx.ingress.kubernetes.io/use-regex: "true"
    ingress.kubernetes.io/proxy-body-size: "0"
    nginx.org/client-max-body-size: "0"
spec:
  rules:
  - http:
      paths:
      - path: /pub
        backend:
          serviceName: pub
          servicePort: 80
    host: {{ .Values.ingress.base_url }}
